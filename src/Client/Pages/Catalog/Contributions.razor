@page "/catalog/contributions"
@attribute [MustHavePermission(FSHAction.View, FSHResource.Contributions)]

@inject IStringLocalizer<SharedResource> SH

<FshTitle Title="@L["Contributions"]" Description="@L["Manage Contributions."]" />

<EntityTableWithGrouping @ref="_table" TEntity="ContributionDto" TId="Guid" TRequest="UpdateContributionRequest" Context="@Context">

    <AdvancedSearchContent>
        <MudGrid>
            <MudItem xs="12" md="4">
                <RuralGovAutocomplete   @bind-Value="SearchRuralGovId" TransformOrigin="Origin.TopCenter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <YearGovAutocomplete @bind-Value="SearchYearId" />
            </MudItem>
            <MudItem xs="12" md="4">
                <NativeAutocomplete @bind-Value="SearchNativeId" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="SearchMonth" Label="@SH["Month"]" HelperText="Enum" OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary" Clearable>
                    @foreach (Months item in Enum.GetValues(typeof(Months)))
                    {
                        <MudSelectItem Value="@item">@SH.GetString(item.ToString()) </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudDateRangePicker @ref="_searchPicker" Label="@SH["Between"]" @bind-DateRange="SearchDateRange" AutoClose="true">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _searchPicker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _searchPicker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => _searchPicker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDateRangePicker>
            </MudItem>
        </MudGrid>
    </AdvancedSearchContent>
    <ImportFormContent>
        <MudItem xs="12" md="6">
            <YearGovAutocomplete For="@(() => context.Value)" @bind-Value="context.Value" TransformOrigin="Origin.TopRight" />
        </MudItem>
    </ImportFormContent>
    <EditFormContent>
        @*@if (!Context.AddEditModal.IsCreate)
        {
        <MudItem xs="12" md="6">
        <MudTextField Value="context.Id" ReadOnly DisableUnderLine Label="@L[$"Contribution Id"]" />
        </MudItem>
        }*@
        
        <MudItem xs="12" md="6">
            <YearGovAutocomplete For="@(() => context.YearId)" @bind-Value="context.YearId" TransformOrigin="Origin.TopRight" />
        </MudItem>
        @*<p hidden="@HideLabel">I am Hidden When HideLabel == true</p>

        <p hidden="@(!HideLabel)">I am Hidden when Hidelabel == false</p>


        <button @onclick="@Toggle">Show/Hide</button>*@

        
        <MudItem xs="12" md="6" Class="d-flex flex-row">
                <MudButton id="addNative"  OnClick="goNativeAdd" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Style="display:none"></MudButton>
            <NativeAutocomplete BindingValueChanged="(async (finded)=>await Finded(finded))" For="@(() => context.NativeId)" @bind-Value="context.NativeId" TransformOrigin="Origin.TopRight">
                
            </NativeAutocomplete>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelect @bind-Value="context.Month" Label="@SH["Month"]" HelperText="Enum" OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary">
                @foreach (Months item in Enum.GetValues(typeof(Months)))
                {
                    <MudSelectItem Value="@item">@SH.GetString(item.ToString()) </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudDatePicker Label="@L["Date"]" For="@(() => context.Date)" @bind-Date="context.Date" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudTextField T="decimal" Label="@L["Summa"]" For="@(() => context.Summa)" @bind-Value="context.Summa" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Description"]" For="@(() => context.Description)"
                          @bind-Value="context.Description" />
        </MudItem>



    </EditFormContent>

</EntityTableWithGrouping>
@code {
    private RenderFragment<ContributionDto> RateFieldTemplate => rate => __builder =>
        {
            <MudRating SelectedValue="@Convert.ToInt32(rate.Rate)" MaxValue="5"  ReadOnly="true"/>
        };
    

}