@using FSH.BlazorWebAssembly.Client.Pages.Catalog;
@inject INativesClient NativesClient
@inject IStringLocalizer<Natives> L

<AddEditModal RequestModel="nativeViewModel" SaveFunc="@createFunc" @ref="addeditModel" Title="@L["Create"]">
    <MudGrid>
    <MudItem xs="12" md="6">
            <MudTextField Label="@L["Name"]" For="@(() => context.Name)" @bind-Value="context.Name" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Surname"]" For="@(() => context.Surname)" @bind-Value="context.Surname" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["MiddleName"]" For="@(() => context.MiddleName)" @bind-Value="context.MiddleName" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDatePicker  Label="@L["BirthDate"]" For="@(() => context.BirthDate)" @bind-Date="context.BirthDate" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Village"]" For="@(() => context.Village)"
                          @bind-Value="context.Village" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Description"]" For="@(() => context.Description)"
                @bind-Value="context.Description" />
        </MudItem>
        <MudItem xs="12" md="6">
            <RuralGovAutocomplete For="@(() => context.RuralGovId)" @bind-Value="context.RuralGovId"  TransformOrigin="Origin.TopRight" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField Label="@L["Rate"]" For="@(() => context.Rate)" @bind-Value="context.Rate" />
        </MudItem>
            <MudItem xs="12" md="12">
            
            <MudItem>
                <div>
                    <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                        StartIcon="@Icons.Filled.CloudUpload" for="fileInput">
                        @L["Upload"]
                    </MudButton>
                    @if( !string.IsNullOrEmpty(context.ImagePath) && string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" Target="_blank"
                            StartIcon="@Icons.Filled.RemoveRedEye" Link="@(Config[ConfigNames.ApiBaseUrl] + @context.ImagePath)" Style="margin-left: 5px;" >
                            @L["View"]
                        </MudButton>

                        <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                            StartIcon="@Icons.Filled.Delete" OnClick="SetDeleteCurrentImageFlag" Style="margin-left: 5px;" >
                            @L["Delete"]
                        </MudButton>
                    }
                    @if(!string.IsNullOrEmpty(context.ImageInBytes))
                    {
                        <MudButton HtmlTag="label" DisableElevation OnClick="ClearImageInBytes" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" Target="_blank"
                            StartIcon="@Icons.Filled.Clear" Style="margin-left: 5px;" >
                            @L["Clear"]
                        </MudButton>
                    }
                </div>
                <InputFile id="fileInput" hidden OnChange="UploadFiles" />
            </MudItem>
            <MudItem>
                @if(!string.IsNullOrEmpty(context.ImageInBytes))
                {
                    <MudAvatar Image ="@context.ImageInBytes" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
                else
                {
                    <MudAvatar Image="@(string.IsNullOrEmpty(@context.ImagePath) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + @context.ImagePath))" Square="true" Style="height: auto; width: auto; max-height: 100%"> </MudAvatar>
                }
            </MudItem>
        </MudItem>
        </MudGrid>
</AddEditModal>

@code {
    [Parameter]
    [EditorRequired]
    public NativeViewModel nativeViewModel { get; set; } = default!;
    private AddEditModal<NativeViewModel> addeditModel = default!;
    private async Task createFunc(NativeViewModel prod)
    {
        if (!string.IsNullOrEmpty(prod.ImageInBytes))
        {
            prod.Image = new FileUploadRequest() { Data = prod.ImageInBytes, Extension = prod.ImageExtension ?? string.Empty, Name = $"{prod.Name}_{Guid.NewGuid():N}" };
        }

        await NativesClient.CreateAsync(prod.Adapt<CreateNativeRequest>());
        prod.ImageInBytes = string.Empty;
    }

    // TODO : Make this as a shared service or something? Since it's used by Profile Component also for now, and literally any other component that will have image upload.
    // The new service should ideally return $"data:{ApplicationConstants.StandardImageFormat};base64,{Convert.ToBase64String(buffer)}"
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            string? extension = Path.GetExtension(e.File.Name);
            if (!ApplicationConstants.SupportedImageFormats.Contains(extension.ToLower()))
            {
                Snackbar.Add("Image Format Not Supported.", Severity.Error);
                return;
            }

            addeditModel.RequestModel.ImageExtension = extension;
            var imageFile = await e.File.RequestImageFileAsync(ApplicationConstants.StandardImageFormat, ApplicationConstants.MaxImageWidth, ApplicationConstants.MaxImageHeight);
            byte[]? buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream(ApplicationConstants.MaxAllowedSize).ReadAsync(buffer);
            addeditModel.RequestModel.ImageInBytes = $"data:{ApplicationConstants.StandardImageFormat};base64,{Convert.ToBase64String(buffer)}";
            addeditModel.ForceRender();
        }
    }

    public void ClearImageInBytes()
    {
        addeditModel.RequestModel.ImageInBytes = string.Empty;
        addeditModel.ForceRender();
    }

    public void SetDeleteCurrentImageFlag()
    {
        addeditModel.RequestModel.ImageInBytes = string.Empty;
        addeditModel.RequestModel.ImagePath = string.Empty;
        addeditModel.RequestModel.DeleteCurrentImage = true;
        addeditModel.ForceRender();
    }
}
